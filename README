# The Duck Object Library

Duck is an object system and library for "duck-typed" programming in C. It takes
most of its cues from Objective-C, CoreFoundation and COM, yet is small and
readable enough to be easily ported to platforms where using those environments
is inconvenient.

## License

The Duck source is distributed under the MIT License. The packages under the
'ThirdParty' directory are distributed according to their individual licenses.


## Major Features

* Support for classes, interfaces, properties and messages.
* Reference counting and zeroing weak references.
* String class with basic UTF-8 support.
* Containers for lists, dictionaries and sets.


## Porting

Duck is written on Mac OSX in XCode, and includes targets for Mac OS and iOS.
It should compile anywhere with a C99 compliant compiler. A few types and
functions, particularly those related to atomic operations will likely need to
be redefined on non-Apple or non-POSIX systems.

A sample SConstruct file is included for building with scons.


## Quick Start

Here's a snippet of code that shows what using Duck looks like.

```C
#include "Duck.h"

int main( int argc, const char * argv[] )
{
    // Create a mutable dictionary
    DKMutableDictionaryRef dict = DKCreate( DKMutableDictinaryClass() );
    
    for( int i = 0; i < 10; i++ )
    {
        // Create a string key
        DKMutableStringRef key = DKCreate( DKMutableStringClass() );
        
        // Strings support the stream interface so we can print to them thusly
        DKStreamPrintf( key, "Key %d", i );

        // Create a string value in the same way
        DKMutableStringRef value = DKCreate( DKMutableStringClass() );
        DKStreamPrintf( value, "Value %d", i );

        // Set the key-value pair in the dictionary
        DKDictionarySetObject( dict, key, value );
        
        // Release the local references to the key and value
        DKRelease( key );
        DKRelease( value );
    }
    
    // Print the dictionary to stdout
    DKPrintf( "%@\n", dict );
    
    // Release the dictionary and the objects it contains
    DKRelease( dict );

    return 0;
}
```


## Library Overview






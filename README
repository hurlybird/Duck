# The Duck Object Library

Duck is an object system and library for "duck-typed" programming in C. It takes
most of its cues from Objective-C, CoreFoundation and COM, yet is small and
readable enough to be easily ported to platforms where using those environments
is inconvenient.


## License

The Duck source is distributed under the MIT License. The packages under the
'ThirdParty' directory are distributed according to their respective licenses.


## Major Features

* Classes, interfaces, properties and messages.
* Thread-safe reference counting and zeroing weak references.
* String class with basic UTF-8 support.
* Container classes implementing lists, dictionaries and sets.


## Porting

Duck is written in XCode, and includes targets for Mac OS and iOS. It should
compile anywhere with a C99 compliant compiler. A few types and functions,
particularly those related to atomic operations will likely need to be redefined
on non-Apple or non-POSIX systems.

A sample SConstruct file is included for building with scons.


## Quick Start

Here's a snippet of code that shows what using Duck looks like.

```C
#include "Duck.h"

int main( int argc, const char * argv[] )
{
    // Create a mutable dictionary
    DKMutableListRef list = DKCreate( DKMutableListClass() );
    
    for( int i = 0; i < 10; i++ )
    {
        // Create a string
        DKMutableStringRef str = DKCreate( DKMutableStringClass() );
        
        // Strings support the stream interface so we can print to them thusly
        DKSPrintf( str, "String %d", i );

        // Add the string to the list
        DKListAppendObject( list, str );
        
        // Release the local reference to the string
        DKRelease( str );
    }
    
    // Print the list to stdout
    DKPrintf( "%@\n", list );
    
    // Release the list and the objects it contains
    DKRelease( list );

    return 0;
}
```


## Library Overview





